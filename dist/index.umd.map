{"version":3,"sources":["global.js","init/index.js","logger/index.js","index.js"],"names":["enable","options","debug","Global","args","console","info","log","warn","error","init","logger"],"mappings":";AAAe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CAAEA,QAAQ,GAAV,QAAA,QAAA;;ACoBd,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAJD,IAAA,EAAA,EAAA,QAAA,cAIC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAFc,IAAA,EAAA,SAACC,GACLD,EAAAA,QAAAA,OAASC,EAAQD,QAC3B,QAAA,QAAA;;AClBc,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAFf,IAAA,EAAA,EAAA,QAAA,cAEe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,CAaXE,MAAO,WACCC,GAAAA,EAAOH,QAAAA,OAAQ,CADZI,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EACY,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IADZA,EACY,GAAA,UAAA,GACfC,QAAQH,MAAME,KAgBtBE,KAAM,WACEH,GAAAA,EAAOH,QAAAA,OAAQ,CADbI,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EACa,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IADbA,EACa,GAAA,UAAA,GACfC,QAAQC,KAAKF,KAgBrBG,IAAK,WACGJ,GAAAA,EAAOH,QAAAA,OAAQ,CADdI,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EACc,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IADdA,EACc,GAAA,UAAA,GACfC,QAAQE,IAAIH,KAgBpBI,KAAM,WAAIJ,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAS,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAATA,EAAS,GAAA,UAAA,GACfC,QAAQG,KAAKJ,IAejBK,MAAO,WAAIL,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAS,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAATA,EAAS,GAAA,UAAA,GAChBC,QAAQI,MAAML,KApFP,QAAA,QAAA;;ACSA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAHf,IAAA,EAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,aAEe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,CAIXM,KAAAA,EAJW,QASXR,MAAOS,EAAOT,QAAAA,MAKdI,KAAMK,EAAOL,QAAAA,KAKbC,IAAKI,EAAOJ,QAAAA,IAKZC,KAAMG,EAAOH,QAAAA,KAKbC,MAAOE,EAAOF,QAAAA,OA7BH,QAAA,QAAA","file":"index.umd.map","sourceRoot":"../src","sourcesContent":["export default { enable: true };","/**\n * @memberof JsLogger\n * @function init\n * @description Enable or disable logger for production environment. If set to false, only warnings \n * and error will be logged.\n * @param {Object} options (see attributes below)\n * @param {String} [options.enable=false] enable/disable log\n\n *\n * @example\n * // Initialize JsLogger\n *  JsLogger.init({\n *      enable: true\n *  });\n */\n\nimport Global from '../global';\n\nexport default (options) => {\n    Global.enable = options.enable;\n};","import Global from '../global';\n\nexport default {\n    /**\n     * @memberof JsLogger\n     * @function debug\n     * @description Debug message for debug logging\n     * @param {any} [args] Any params you want to log as debug\n     * @returns void\n\n    *\n    * @example\n    * // Debug JsLogger\n    *  JsLogger.debug(1, 'a', [1], {messasge: 'a message'}, true);\n    */\n    debug: (...args) => {\n        if (Global.enable) {\n            console.debug(args);\n        }\n    },\n\n    /**\n     * @memberof JsLogger\n     * @function info\n     * @description Info message for info logging\n     * @param {any} [args] Any params you want to log as info\n     * @returns void\n\n    *\n    * @example\n    * // Info JsLogger\n    *  JsLogger.info(1, 'a', [1], {messasge: 'a message'}, true);\n    */\n    info: (...args) => {\n        if (Global.enable) {\n            console.info(args);\n        }\n    },\n\n    /**\n     * @memberof JsLogger\n     * @function log\n     * @description Log message for log logging\n     * @param {any} [args] Any params you want to log as log\n     * @returns void\n\n    *\n    * @example\n    * // Log JsLogger\n    *  JsLogger.log(1, 'a', [1], {messasge: 'a message'}, true);\n    */\n    log: (...args) => {\n        if (Global.enable) {\n            console.log(args);\n        }\n    },\n\n    /**\n     * @memberof JsLogger\n     * @function warn\n     * @description Warn message for warn logging\n     * @param {any} [args] Any params you want to log as warn\n     * @returns void\n\n    *\n    * @example\n    * // Warn JsLogger\n    *  JsLogger.warn(1, 'a', [1], {messasge: 'a message'}, true);\n    */\n    warn: (...args) => {\n        console.warn(args);\n    },\n\n    /**\n     * @memberof JsLogger\n     * @function error\n     * @description Error message for error logging\n     * @param {any} [args] Any params you want to log as error\n     * @returns void\n\n    *\n    * @example\n    * // Error JsLogger\n    *  JsLogger.error(1, 'a', [1], {messasge: 'a message'}, true);\n    */\n    error: (...args) => {\n        console.error(args);\n    },\n};","/**\n * @class JsLogger\n * @description JsLogger is an advanced logger used for stable production build. You can set\n *  the enable value using the init function depending where you are.\n *\n * For example, using the node environment variables, you can decide to enable logger\n *  only in a stage environment and disable it while you are in a production environment.\n */\nimport init from './init';\nimport logger from './logger';\n\nexport default {\n    /**\n     * @see modules/init\n     */\n    init,\n\n    /**\n     * @see modules/debug\n     */\n    debug: logger.debug,\n\n    /**\n     * @see modules/info\n     */\n    info: logger.info,\n\n    /**\n     * @see modules/log\n     */\n    log: logger.log,\n\n    /**\n     * @see modules/warn\n     */\n    warn: logger.warn,\n\n    /**\n     * @see modules/error\n     */\n    error: logger.error,\n};\n"]}