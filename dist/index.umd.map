{"version":3,"sources":["global.js","init/index.js","logger/index.js","index.js"],"names":["enable","options","debug","Global","args","console","info","log","warn","error","init"],"mappings":";AAAe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CAAEA,QAAQ,GAAV,QAAA,QAAA;;ACoBd,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAJD,IAAA,EAAA,EAAA,QAAA,cAIC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAFc,IAAA,EAAA,SAACC,GACLD,EAAAA,QAAAA,OAASC,EAAQD,QAC3B,QAAA,QAAA;;ACmEM,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,MAAA,QAAA,KAAA,QAAA,IAAA,QAAA,KAAA,QAAA,WAAA,EAvFP,IAAA,EAAA,EAAA,QAAA,cAuFO,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA1EA,IAAME,EAAQ,WACbC,GAAAA,EAAOH,QAAAA,OAAQ,CADEI,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EACF,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IADEA,EACF,GAAA,UAAA,GACfC,QAAQH,MAAME,KAwEf,QAAA,MAAA,EAvDA,IAAME,EAAO,WACZH,GAAAA,EAAOH,QAAAA,OAAQ,CADCI,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EACD,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IADCA,EACD,GAAA,UAAA,GACfC,QAAQC,KAAKF,KAqDd,QAAA,KAAA,EApCA,IAAMG,EAAM,WACXJ,GAAAA,EAAOH,QAAAA,OAAQ,CADAI,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EACA,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IADAA,EACA,GAAA,UAAA,GACfC,QAAQE,IAAIH,KAkCb,QAAA,IAAA,EAjBA,IAAMI,EAAO,WAAIJ,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAS,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAATA,EAAS,GAAA,UAAA,GAC7BC,QAAQG,KAAKJ,IAgBV,QAAA,KAAA,EAAA,IAAMK,EAAQ,WAAIL,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAS,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAATA,EAAS,GAAA,UAAA,GAC9BC,QAAQI,MAAML,IADX,QAAA,MAAA;;AC7EQ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EALf,IAAA,EAAA,EAAA,QAAA,iBACA,EAAA,QAAA,kBAIe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,CAIXM,KAAAA,EAJW,QASXR,MAAAA,EATW,MAcXI,KAAAA,EAdW,KAmBXC,IAAAA,EAnBW,IAwBXC,KAAAA,EAxBW,KA6BXC,MAAAA,EAAAA,OA7BW,QAAA,QAAA","file":"index.umd.map","sourceRoot":"../src","sourcesContent":["export default { enable: true };","/**\n * @memberof JsLogger\n * @function init\n * @description Enable or disable logger for production environment. If set to false, only warnings\n * and error will be logged.\n * @param {Object} options (see attributes below)\n * @param {String} [options.enable=false] enable/disable log\n\n *\n * @example\n * // Initialize JsLogger\n *  JsLogger.init({\n *      enable: true\n *  });\n */\n\nimport Global from '../global';\n\nexport default (options) => {\n    Global.enable = options.enable;\n};","import Global from '../global';\n\n/**\n * @memberof JsLogger\n * @function debug\n * @description Debug message for debug logging\n * @param {any} [args] Any params you want to log as debug\n * @returns void\n *\n * @example\n * // Debug JsLogger\n *  JsLogger.debug(1, 'a', [1], {messasge: 'a message'}, true);\n */\nexport const debug = (...args) => {\n    if (Global.enable) {\n        console.debug(args);\n    }\n};\n\n\n/**\n * @memberof JsLogger\n * @function info\n * @description Info message for info logging\n * @param {any} [args] Any params you want to log as info\n * @returns void\n\n *\n * @example\n * // Info JsLogger\n *  JsLogger.info(1, 'a', [1], {messasge: 'a message'}, true);\n */\nexport const info = (...args) => {\n    if (Global.enable) {\n        console.info(args);\n    }\n};\n\n\n/**\n * @memberof JsLogger\n * @function log\n * @description Log message for log logging\n * @param {any} [args] Any params you want to log as log\n * @returns void\n\n *\n * @example\n * // Log JsLogger\n *  JsLogger.log(1, 'a', [1], {messasge: 'a message'}, true);\n */\nexport const log = (...args) => {\n    if (Global.enable) {\n        console.log(args);\n    }\n};\n\n\n/**\n * @memberof JsLogger\n * @function warn\n * @description Warn message for warn logging\n * @param {any} [args] Any params you want to log as warn\n * @returns void\n\n *\n * @example\n * // Warn JsLogger\n *  JsLogger.warn(1, 'a', [1], {messasge: 'a message'}, true);\n */\nexport const warn = (...args) => {\n    console.warn(args);\n};\n\n\n/**\n * @memberof JsLogger\n * @function error\n * @description Error message for error logging\n * @param {any} [args] Any params you want to log as error\n * @returns void\n\n *\n * @example\n * // Error JsLogger\n *  JsLogger.error(1, 'a', [1], {messasge: 'a message'}, true);\n */\nexport const error = (...args) => {\n    console.error(args);\n};","/**\n * @class JsLogger\n * @description JsLogger is an advanced logger used for stable production build. You can set\n *  the enable value using the init function depending where you are.\n */\nimport init from './init/index';\nimport {\n    debug, info, log, warn, error\n} from './logger/index';\n\nexport default {\n    /**\n     * @see modules/init\n     */\n    init,\n\n    /**\n     * @see modules/debug\n     */\n    debug,\n\n    /**\n     * @see modules/info\n     */\n    info,\n\n    /**\n     * @see modules/log\n     */\n    log,\n\n    /**\n     * @see modules/warn\n     */\n    warn,\n\n    /**\n     * @see modules/error\n     */\n    error\n};\n"]}